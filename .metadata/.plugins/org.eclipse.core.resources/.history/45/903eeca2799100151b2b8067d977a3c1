package game;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.Graphics;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Random;

import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.Timer;

import client.DDR;
import client.MainMenuGUI;
import javazoom.jl.player.Player;


public class MultiPlayerGUI extends JPanel {
	//blabla
	private User user;
	private Image leftArrow, rightArrow, upArrow, downArrow, bg;
	private Image stillLeftArrow, stillRightArrow, stillUpArrow, stillDownArrow;
	//private int leftY, rightY, upY, downY;
	private int speed;
	private int score;
	private int streak;
	private JLabel scoreLabel;
	private JLabel streakLabel;
	private Font font, fontSmall;
	private Timer timer;
	private ArrayList<Arrow> arrows;
	private String[] directions;
	private Image dancer;
	private Timer songTimer;
	private Song song;
	
	public SinglePlayerGUI(User u, String selectedSong) {
		user = u;
		initializeVariables();
		speed = 20;
		directions = new String[]{"left", "up", "down", "right"};
		createGUI();
		addActions();
		timer = new Timer(10000, new TimerListener());
		timer.setDelay(100);
		timer.setInitialDelay(0);
		timer.start();
		songTimer = new Timer(10000, new SongTimerListener());
		songTimer.setDelay(1000);
		songTimer.setInitialDelay(0);
		songTimer.start();
		arrows = new ArrayList<Arrow>();
		addKeyListener(new TAdapter());
		setFocusable(true);
		song = new Song(selectedSong);
		SongPlayer songplayer = new SongPlayer(song);
		songplayer.play();
		
		
	}
	
	
	public void initializeVariables() {
		try {
		      InputStream in = new BufferedInputStream(new FileInputStream("fonts/alpha_echo.ttf"));
		      Font ttfBase = Font.createFont(Font.TRUETYPE_FONT, in);
		      font = ttfBase.deriveFont(Font.BOLD, 32);
		      fontSmall = ttfBase.deriveFont(Font.BOLD, 18);
		
		} catch (FontFormatException e) {
		        e.printStackTrace();
		} catch (IOException e) {
		        e.printStackTrace();
		}
		Toolkit t = Toolkit.getDefaultToolkit();
		stillLeftArrow = t.getImage("Images/arrowleft.png");
		stillRightArrow = t.getImage("Images/arrowright.png");
		stillUpArrow = t.getImage("Images/arrowup.png");
		stillDownArrow = t.getImage("Images/arrowdown.png");
		
		leftArrow = t.getImage("Images/arrowleftgif.gif");
		rightArrow = t.getImage("Images/arrowrightgif.gif");
		upArrow = t.getImage("Images/arrowupgif.gif");
		downArrow = t.getImage("Images/arrowdowngif.gif");
		bg = t.getImage("Images/gameplaybackground.jpg");
		
		dancer = Toolkit.getDefaultToolkit().getImage("Images/" + user.getCharacter() + "left.png");
	}
	
	public void hit(String direction, boolean perfect) {
		dancer = Toolkit.getDefaultToolkit().getImage("Images/" +user.getCharacter() + direction + ".png");
		streak++;
		if (perfect) score += 20 * streak;
		else score += 10 * streak;
		updateLabels();
	}
	
	public void miss() {
		streak = 0;
		updateLabels();
		//dancer = Toolkit.getDefaultToolkit().getImage("Images/dancinggirlmiss.png");
	}
	
	public void updateLabels() {
		scoreLabel.setText("Score: " + score);
		streakLabel.setText("Streak: " + streak);
	}
	
	public void createGUI() {
		setLayout(new BorderLayout());
		JPanel scorestreakpanel = new JPanel(new GridLayout(1,2));
		scoreLabel = new JLabel("Score: " + score, SwingConstants.CENTER);
		streakLabel = new JLabel("Streak: " + streak, SwingConstants.CENTER);
		scoreLabel.setForeground(Color.WHITE);
		streakLabel.setForeground(Color.WHITE);
		scoreLabel.setFont(font);
		streakLabel.setFont(font);
		scorestreakpanel.add(scoreLabel);
		scorestreakpanel.add(streakLabel);
		scorestreakpanel.setOpaque(false);
		add(scorestreakpanel, BorderLayout.SOUTH);
	}
	
	public void addActions() {
		
	}
	
	public Image getDancerImage() {
		return dancer;
	}
	
	public void paintComponent(Graphics g) {
		g.drawImage(bg, 0, 0, getWidth(), getHeight(), null);
		g.drawImage(stillLeftArrow, getWidth()/16, getHeight()/16, getWidth()/8, getHeight()/8, null);
		g.drawImage(stillDownArrow, 5*getWidth()/16, getHeight()/16, getWidth()/8, getHeight()/8, null);
		g.drawImage(stillUpArrow, 9 * getWidth()/16, getHeight()/16, getWidth()/8, getHeight()/8, null);
		g.drawImage(stillRightArrow, 13 * getWidth()/16, getHeight()/16, getWidth()/8, getHeight()/8, null);

		g.drawImage(getDancerImage(), getWidth()/3, getHeight()/3, getWidth()/3, getHeight()/2, null);
		
		for (Arrow a : arrows) {
			g.drawImage(a.getImage(), a.getX(), a.getY(), getWidth()/8, getHeight()/8, null);
		}
		
		repaint();
	}
	
	public void endGame() {
		JOptionPane.showMessageDialog(this, "Game Over!" + "Score: " + score);
		timer.stop();
		setVisible(false);
		MainMenuGUI mmgui = new MainMenuGUI(user);
		DDR.cardPanel.add(mmgui);
		mmgui.setVisible(true);
		
	}
	
	class TimerListener implements ActionListener {
		public void actionPerformed(ActionEvent e) {
			Random r = new Random();
			int random = r.nextInt(100);
			if (random < 16) {
				String direction = directions[random % 4];
				boolean wontOverlap = true;
				for (Arrow a : arrows) {
					if (a.getY() > 7*getHeight()/8) {
						wontOverlap = false;
						break;
					}
				}
				if (wontOverlap) {
					arrows.add(new Arrow(directions[random % 4]));
					if (r.nextInt(4) == 0) {
						String otherdir = arrows.get(arrows.size() - 1).getDir();
						int newdir = r.nextInt(4);
						while (directions[newdir].equals(otherdir)) {
							newdir = r.nextInt(4);
						}
						arrows.add(new Arrow(directions[newdir]));
					}
				}
			}
			for (int i = 0; i < arrows.size(); i++) {
				arrows.get(i).move();
				if (arrows.get(i).getY() <= arrows.get(i).getHitY() && !arrows.get(i).wasHit()) arrows.get(i).miss();
				if (arrows.get(i).getY() <= -getHeight()/8) {
					if (!arrows.get(i).wasHit()) {
						miss();
					}
					arrows.remove(i);
					i--;
				}
			}
			repaint();
			validate();
		}
		
	}
	
	class SongTimerListener implements ActionListener {
		private int currentSecond = 0;
		public void actionPerformed(ActionEvent e) {
			System.out.println("Seconds: " + currentSecond);
			System.out.println("Song length: " + song.getLength());
			currentSecond++;
			if (currentSecond == song.getLength()) {
				System.out.println("ending game");
				endGame();
			}
		}
	}
	
	class Arrow {
		int x;
		int y;
		int hitx;
		int hity;
		Image i;
		String dir;
		boolean hit;
		public Arrow(String dir) {
			this.dir = dir;
			hit = false;
			y = getHeight();
			hity = getHeight()/16;
			if (dir.equals("left")) {
				x = getWidth()/16; 
				leftArrow.flush();
				i = leftArrow;
			}
			else if (dir.equals("down")) {
				x = 5*getWidth()/16;
				downArrow.flush();
				i = downArrow;
			}
			else if (dir.equals("up")) {
				x = 9*getWidth()/16;
				i = upArrow;
			}
			else if (dir.equals("right")) {
				x = 13*getWidth()/16;
				i = rightArrow;
			}
			hitx = x;
		}
		
		public Image getImage() {
			return i;
		}
		
		public void hit() {
			i = Toolkit.getDefaultToolkit().getImage("Images/arrow" + dir + "hit.png");
			hit = true;
		}
		
		public void miss() {
			 i = Toolkit.getDefaultToolkit().getImage("Images/arrowmiss.png");
		}
		
		public boolean wasHit() {
			return hit;
		}
		
		public void move() {
			y-=speed;
		}
		
		public int getX() {
			return x;
		}
		public int getY() {
			return y;
		}
		
		public int getHitX() {
			return hitx;
		}
		public int getHitY() {
			return hity;
		}
		
		public String getDir() {
			return dir;
		}
	}
	
	class TAdapter extends KeyAdapter {

        @Override
        public void keyPressed(KeyEvent e) {
            int key = e.getKeyCode();

            if ((key == KeyEvent.VK_LEFT)) {
            	//System.out.println("left");
            	checkForHit("left");
            }

            if ((key == KeyEvent.VK_RIGHT)) {
            	//System.out.println("right");
            	checkForHit("right");
            }

            if ((key == KeyEvent.VK_UP)) {
            	//System.out.println("up");
            	checkForHit("up");
            }

            if ((key == KeyEvent.VK_DOWN)) {
            	//System.out.println("down");
            	checkForHit("down");
            }
        }
    }
	
	public Arrow checkForHit(String direction) {
		for (Arrow a : arrows) {
			if (a.getDir().equals(direction) && Math.abs(a.getHitY() - a.getY()) < 30) {
				a.hit();
				hit(a.getDir(), Math.abs(a.getHitY() - a.getY()) < 10);
				return a;
			}
		}
		miss();
		return null;
	}
}