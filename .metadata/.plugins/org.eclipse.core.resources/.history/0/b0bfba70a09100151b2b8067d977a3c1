package server;

import java.io.IOException;
import java.net.BindException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Vector;

public class ServerListener extends Thread {
	
	private ServerSocket ss;
	private Vector<ServerClientCommunicator> sccVector;
	protected Map<String, String> oUsers = new HashMap<String, String>(); 
	
	public ServerListener(ServerSocket ss){
		this.ss = ss;
		sccVector = new Vector<ServerClientCommunicator>();
	}
	
	public void removeServerClientCommunicator(ServerClientCommunicator scc) {
		sccVector.remove(scc);
		//Print to ServerGUI
	}
	
	public void addUser(String s, String u)
	{
		oUsers.put(s, u);
		ServerGUI.addMessage("Users online: " + oUsers.size());
	}
	public String getUsernames(String s)
	{
		String toReturn = "";
		Iterator it = oUsers.entrySet().iterator();
		while(it.hasNext()) {
			Map.Entry pair = (Map.Entry)it.next();
			if((s.equals(pair.getValue()))){}
			else{
			toReturn = toReturn + pair.getValue() + "/";
			}
		}
		return toReturn;
	}
	
	public void removeUser(String s)
	{
		System.out.println(s);
		ServerGUI.addMessage(s);
		oUsers.remove(s);
		ServerGUI.addMessage("Users online: " + oUsers.size());
	}
	
	private ServerClientCommunicator findSCC(String u)
	{
		ServerClientCommunicator toReturn = null;
		
		
		
		return toReturn;
	}
	
	public boolean ask(String u)
	{
		boolean toReturn = false;
		ServerClientCommunicator req = findSCC(u);
		req.reqGame(String r, );
		
		return toReturn;
	}
	
	public void run() {
		try {
			ServerGUI.addMessage(Constants.initialFactoryTextAreaString + ss.getLocalPort());
			while(true) {
				Socket s = ss.accept();
				ServerGUI.addMessage(Constants.startClientConnectedString + s.getInetAddress() + ":" + s.getPort() + Constants.endClientConnectedString);
				
				try {
					// this line can throw an IOException
					// if it does, we won't start the thread
					ServerClientCommunicator scc = new ServerClientCommunicator(s, this);
					scc.start();
					sccVector.add(scc);
					
				} catch (IOException ioe) {
					//Util.printExceptionToCommand(ioe);
				}
			}
		} catch(BindException be) {
			//Util.printExceptionToCommand(be);
		}
		catch (IOException ioe) {
			//Util.printExceptionToCommand(ioe); 
		} finally {
			if (ss != null) {
				try {
					ss.close();
				} catch (IOException ioe) {
					//Util.printExceptionToCommand(ioe);
				}
			}
		}
	}
}